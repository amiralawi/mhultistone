/*
    this file is generated by mhultistone.generator.py
    using mhultistone.c.jinja as a template

    ngen = {{ n }}
*/

#include <stdint.h>
#include <stdio.h>  // for strcpy, strcmp
#include <stdlib.h> // malloc
#include <string.h>
#include <inttypes.h>

#include "mhultistone.h"


{% for i in range(n) %}

//
// BEGIN instance code i={{ i }}
//

dhrystoneContext CTX{{ i }};
void mhultistone_instance_CTX{{ i }}(int64_t n, int* keepRunning, int64_t *count) {
    /*****/
    /* main program, corresponds to procedures        */
    /* Main and Proc_0 in the Ada version             */

    One_Fifty       Int_1_Loc;
    REG One_Fifty   Int_2_Loc;
    One_Fifty       Int_3_Loc;
    REG char        Ch_Index;
    Enumeration     Enum_Loc;
    Str_30          Str_1_Loc;
    Str_30          Str_2_Loc;
    REG int64_t         Run_Index;
    REG int64_t         Number_Of_Runs = n;



    /* Initializations */

    
    CTX{{ i }}.Next_Ptr_Glob = (Rec_Pointer)malloc(sizeof(Rec_Type));
    CTX{{ i }}.Ptr_Glob = (Rec_Pointer)malloc(sizeof(Rec_Type));

    CTX{{ i }}.Ptr_Glob->Ptr_Comp = CTX{{ i }}.Next_Ptr_Glob;
    CTX{{ i }}.Ptr_Glob->Discr = Ident_1;
    CTX{{ i }}.Ptr_Glob->variant.var_1.Enum_Comp = Ident_3;
    CTX{{ i }}.Ptr_Glob->variant.var_1.Int_Comp = 40;
    strcpy(CTX{{ i }}.Ptr_Glob->variant.var_1.Str_Comp,
        "DHRYSTONE PROGRAM, SOME STRING");
    
    
    // Str_1_loc is allocated on the stack, this needs to be initialized in the instance
    strcpy(Str_1_Loc, "DHRYSTONE PROGRAM, 1'ST STRING");

    CTX{{ i }}.Arr_2_Glob[8][7] = 10;
    /* Was missing in published program. Without this statement,    */
    /* Arr_2_Glob [8][7] would have an undefined value.             */
    /* Warning: With 16-Bit processors and Number_Of_Runs > 32000,  */
    /* overflow may occur for this array element.                   */



    int counter = 0;
    while(*keepRunning){
        for (Run_Index = 0; Run_Index < Number_Of_Runs; Run_Index++)
        {

            Proc_5_CTX{{ i }}();
            Proc_4_CTX{{ i }}();
            /* Ch_1_Glob == 'A', Ch_2_Glob == 'B', Bool_Glob == true */
            Int_1_Loc = 2;
            Int_2_Loc = 3;
            strcpy(Str_2_Loc, "DHRYSTONE PROGRAM, 2'ND STRING");
            Enum_Loc = Ident_2;
            CTX{{ i }}.Bool_Glob = !Func_2_CTX{{ i }}(Str_1_Loc, Str_2_Loc);
            /* Bool_Glob == 1 */
            while (Int_1_Loc < Int_2_Loc)  /* loop body executed once */
            {
                Int_3_Loc = 5 * Int_1_Loc - Int_2_Loc;
                /* Int_3_Loc == 7 */
                Proc_7_CTX{{ i }}(Int_1_Loc, Int_2_Loc, &Int_3_Loc);
                /* Int_3_Loc == 7 */
                Int_1_Loc += 1;
            } /* while */
        /* Int_1_Loc == 3, Int_2_Loc == 3, Int_3_Loc == 7 */
            Proc_8_CTX{{ i }}(CTX{{ i }}.Arr_1_Glob, CTX{{ i }}.Arr_2_Glob, Int_1_Loc, Int_3_Loc);
            /* Int_Glob == 5 */
            Proc_1_CTX{{ i }}(CTX{{ i }}.Ptr_Glob);
            for (Ch_Index = 'A'; Ch_Index <= CTX{{ i }}.Ch_2_Glob; ++Ch_Index)
                /* loop body executed twice */
            {
                if (Enum_Loc == Func_1_CTX{{ i }}(Ch_Index, 'C'))
                    /* then, not executed */
                {
                    Proc_6_CTX{{ i }}(Ident_1, &Enum_Loc);
                    strcpy(Str_2_Loc, "DHRYSTONE PROGRAM, 3'RD STRING");
                    Int_2_Loc = Run_Index;
                    CTX{{ i }}.Int_Glob = Run_Index;
                }
            }
            /* Int_1_Loc == 3, Int_2_Loc == 3, Int_3_Loc == 7 */
            Int_2_Loc = Int_2_Loc * Int_1_Loc;
            Int_1_Loc = Int_2_Loc / Int_3_Loc;
            Int_2_Loc = 7 * (Int_2_Loc - Int_3_Loc) - Int_1_Loc;
            /* Int_1_Loc == 1, Int_2_Loc == 13, Int_3_Loc == 7 */
            Proc_2_CTX{{ i }}(&Int_1_Loc);
            /* Int_1_Loc == 5 */

        } /* loop "for Run_Index" */

        counter++;
    }
    
    *count = Number_Of_Runs * counter;


}

void Proc_1_CTX{{ i }}(REG Rec_Pointer Ptr_Val_Par) {
    /******************/
    /* executed once */

    REG Rec_Pointer Next_Record = Ptr_Val_Par->Ptr_Comp;
    /* == Ptr_Glob_Next */
/* Local variable, initialized with Ptr_Val_Par->Ptr_Comp,    */
/* corresponds to "rename" in Ada, "with" in Pascal           */

    structassign(*Ptr_Val_Par->Ptr_Comp, *CTX{{ i }}.Ptr_Glob);
    Ptr_Val_Par->variant.var_1.Int_Comp = 5;
    Next_Record->variant.var_1.Int_Comp
        = Ptr_Val_Par->variant.var_1.Int_Comp;
    Next_Record->Ptr_Comp = Ptr_Val_Par->Ptr_Comp;
    Proc_3_CTX{{ i }}(&Next_Record->Ptr_Comp);
    /* Ptr_Val_Par->Ptr_Comp->Ptr_Comp
                        == Ptr_Glob->Ptr_Comp */
    if (Next_Record->Discr == Ident_1)
        /* then, executed */
    {
        Next_Record->variant.var_1.Int_Comp = 6;
        Proc_6_CTX{{ i }}(Ptr_Val_Par->variant.var_1.Enum_Comp,
            &Next_Record->variant.var_1.Enum_Comp);
        Next_Record->Ptr_Comp = CTX{{ i }}.Ptr_Glob->Ptr_Comp;
        Proc_7_CTX{{ i }}(Next_Record->variant.var_1.Int_Comp, 10,
            &Next_Record->variant.var_1.Int_Comp);
    }
    else /* not executed */
        structassign(*Ptr_Val_Par, *Ptr_Val_Par->Ptr_Comp);
} /* Proc_1 */

void Proc_2_CTX{{ i }}(One_Fifty* Int_Par_Ref) {
    /******************/
    /* executed once */
    /* *Int_Par_Ref == 1, becomes 4 */

    One_Fifty  Int_Loc;
    Enumeration   Enum_Loc;

    Int_Loc = *Int_Par_Ref + 10;
    do /* executed once */
        if (CTX{{ i }}.Ch_1_Glob == 'A')
            /* then, executed */
        {
            Int_Loc -= 1;
            *Int_Par_Ref = Int_Loc - CTX{{ i }}.Int_Glob;
            Enum_Loc = Ident_1;
        } /* if */
    while (Enum_Loc != Ident_1); /* true */
} /* Proc_2 */

void Proc_3_CTX{{ i }}(Rec_Pointer* Ptr_Ref_Par) {
    /******************/
    /* executed once */
    /* Ptr_Ref_Par becomes Ptr_Glob */

    if (CTX{{ i }}.Ptr_Glob != Null)
        /* then, executed */
        *Ptr_Ref_Par = CTX{{ i }}.Ptr_Glob->Ptr_Comp;
    Proc_7_CTX{{ i }}(10, CTX{{ i }}.Int_Glob, &CTX{{ i }}.Ptr_Glob->variant.var_1.Int_Comp);
} /* Proc_3 */

void Proc_4_CTX{{ i }}() {
    /* without parameters */
    /*******/
    /* executed once */

    Boolean Bool_Loc;

    Bool_Loc = CTX{{ i }}.Ch_1_Glob == 'A';
    CTX{{ i }}.Bool_Glob = Bool_Loc | CTX{{ i }}.Bool_Glob;
    CTX{{ i }}.Ch_2_Glob = 'B';
} /* Proc_4 */

void Proc_5_CTX{{ i }}() {
    /* without parameters */
    /*******/
    /* executed once */

    CTX{{ i }}.Ch_1_Glob = 'A';
    CTX{{ i }}.Bool_Glob = false;
} /* Proc_5 */

void Proc_6_CTX{{ i }}(Enumeration  Enum_Val_Par, Enumeration* Enum_Ref_Par) {
    /*********************************/
    /* executed once */
    /* Enum_Val_Par == Ident_3, Enum_Ref_Par becomes Ident_2 */

    *Enum_Ref_Par = Enum_Val_Par;
    if (!Func_3_CTX{{ i }}(Enum_Val_Par))
        /* then, not executed */
        *Enum_Ref_Par = Ident_4;
    switch (Enum_Val_Par)
    {
    case Ident_1:
        *Enum_Ref_Par = Ident_1;
        break;
    case Ident_2:
        if (CTX{{ i }}.Int_Glob > 100)
            /* then */
            *Enum_Ref_Par = Ident_1;
        else *Enum_Ref_Par = Ident_4;
        break;
    case Ident_3: /* executed */
        *Enum_Ref_Par = Ident_2;
        break;
    case Ident_4: break;
    case Ident_5:
        *Enum_Ref_Par = Ident_3;
        break;
    } /* switch */
} /* Proc_6 */

void Proc_7_CTX{{ i }}(One_Fifty Int_1_Par_Val, One_Fifty Int_2_Par_Val, One_Fifty* Int_Par_Ref) {
    /**********************************************/
        /* executed three times                                      */
        /* first call:      Int_1_Par_Val == 2, Int_2_Par_Val == 3,  */
        /*                  Int_Par_Ref becomes 7                    */
        /* second call:     Int_1_Par_Val == 10, Int_2_Par_Val == 5, */
        /*                  Int_Par_Ref becomes 17                   */
        /* third call:      Int_1_Par_Val == 6, Int_2_Par_Val == 10, */
        /*                  Int_Par_Ref becomes 18                   */

    One_Fifty Int_Loc;

    Int_Loc = Int_1_Par_Val + 2;
    *Int_Par_Ref = Int_2_Par_Val + Int_Loc;
} /* Proc_7 */

void Proc_8_CTX{{ i }}(Arr_1_Dim Arr_1_Par_Ref, Arr_2_Dim Arr_2_Par_Ref, int Int_1_Par_Val, int Int_2_Par_Val) {
    /*********************************************************************/
    /* executed once      */
    /* Int_Par_Val_1 == 3 */
    /* Int_Par_Val_2 == 7 */

    REG One_Fifty Int_Index;
    REG One_Fifty Int_Loc;

    Int_Loc = Int_1_Par_Val + 5;
    Arr_1_Par_Ref[Int_Loc] = Int_2_Par_Val;
    Arr_1_Par_Ref[Int_Loc + 1] = Arr_1_Par_Ref[Int_Loc];
    Arr_1_Par_Ref[Int_Loc + 30] = Int_Loc;
    for (Int_Index = Int_Loc; Int_Index <= Int_Loc + 1; ++Int_Index)
        Arr_2_Par_Ref[Int_Loc][Int_Index] = Int_Loc;
    Arr_2_Par_Ref[Int_Loc][Int_Loc - 1] += 1;
    Arr_2_Par_Ref[Int_Loc + 20][Int_Loc] = Arr_1_Par_Ref[Int_Loc];
    CTX{{ i }}.Int_Glob = 5;
} /* Proc_8 */

Enumeration Func_1_CTX{{ i }}(Capital_Letter Ch_1_Par_Val, Capital_Letter Ch_2_Par_Val) {
    /*************************************************/
    /* executed three times                                         */
    /* first call:      Ch_1_Par_Val == 'H', Ch_2_Par_Val == 'R'    */
    /* second call:     Ch_1_Par_Val == 'A', Ch_2_Par_Val == 'C'    */
    /* third call:      Ch_1_Par_Val == 'B', Ch_2_Par_Val == 'C'    */

    Capital_Letter        Ch_1_Loc;
    Capital_Letter        Ch_2_Loc;

    Ch_1_Loc = Ch_1_Par_Val;
    Ch_2_Loc = Ch_1_Loc;
    if (Ch_2_Loc != Ch_2_Par_Val)
        /* then, executed */
        return (Ident_1);
    else  /* not executed */
    {
        CTX{{ i }}.Ch_1_Glob = Ch_1_Loc;
        return (Ident_2);
    }
} /* Func_1 */

Boolean Func_2_CTX{{ i }}(Str_30 Str_1_Par_Ref, Str_30 Str_2_Par_Ref) {
    /*************************************************/
    /* executed once */
    /* Str_1_Par_Ref == "DHRYSTONE PROGRAM, 1'ST STRING" */
    /* Str_2_Par_Ref == "DHRYSTONE PROGRAM, 2'ND STRING" */

    REG One_Thirty        Int_Loc;
    Capital_Letter    Ch_Loc;

    Int_Loc = 2;
    while (Int_Loc <= 2) /* loop body executed once */
        if (Func_1_CTX{{ i }}(Str_1_Par_Ref[Int_Loc],
            Str_2_Par_Ref[Int_Loc + 1]) == Ident_1)
            /* then, executed */
        {
            Ch_Loc = 'A';
            Int_Loc += 1;
        } /* if, while */
    if (Ch_Loc >= 'W' && Ch_Loc < 'Z')
        /* then, not executed */
        Int_Loc = 7;
    if (Ch_Loc == 'R')
        /* then, not executed */
        return (true);
    else /* executed */
    {
        if (strcmp(Str_1_Par_Ref, Str_2_Par_Ref) > 0)
            /* then, not executed */
        {
            Int_Loc += 7;
            CTX{{ i }}.Int_Glob = Int_Loc;
            return (true);
        }
        else /* executed */
            return (false);
    } /* if Ch_Loc */
} /* Func_2 */

Boolean Func_3_CTX{{ i }}(Enumeration Enum_Par_Val) {
    /***************************/
    /* executed once        */
    /* Enum_Par_Val == Ident_3 */

    Enumeration Enum_Loc;

    Enum_Loc = Enum_Par_Val;
    if (Enum_Loc == Ident_3)
        /* then, executed */
        return (true);
    else /* not executed */
        return (false);
} /* Func_3 */

{% endfor %}
