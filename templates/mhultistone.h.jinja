#ifndef MHULTISTONE_H
#define MHULTISTONE_H

/*
    this file is generated by mhultistone.generator.py
    using mhultistone.h.jinja as a template

    ngen = {{ n }}
*/

#include <stdint.h>

#define Version "C, mhultistone Version 0.1"
#define MHULTI_N_CORES {{ ncores }}
#define MHULTI_N_INSTANCES {{ n }}

#ifdef NOSTRUCTASSIGN
    #define structassign(d, s)      memcpy(&(d), &(s), sizeof(d))
#else
    #define structassign(d, s)      d = s
#endif

#ifdef  NOENUM
    #define Ident_1 0
    #define Ident_2 1
    #define Ident_3 2
    #define Ident_4 3
    #define Ident_5 4
    typedef int   Enumeration;
#else
    typedef       enum { Ident_1, Ident_2, Ident_3, Ident_4, Ident_5 }
    Enumeration;
#endif
/* for boolean and enumeration types in Ada, Pascal */

/* General definitions: */

#ifndef REG
    #define REG_BOOLEAN false
    #define REG
    /* REG becomes defined as empty */
    /* i.e. no register variables   */
#else
    #define REG_BOOLEAN true
#endif

#define Null 0      // Value of a Null pointer
#define true  1
#define false 0

typedef int     One_Thirty;
typedef int     One_Fifty;
typedef char    Capital_Letter;
typedef int     Boolean;
typedef char    Str_30[31];
typedef int     Arr_1_Dim[50];
typedef int     Arr_2_Dim[50][50];

typedef struct record{
    struct record* Ptr_Comp;
    Enumeration    Discr;
    union {
        struct {
            Enumeration Enum_Comp;
            int         Int_Comp;
            char        Str_Comp[31];
        } var_1;
        struct {
            Enumeration E_Comp_2;
            char        Str_2_Comp[31];
        } var_2;
        struct {
            char        Ch_1_Comp;
            char        Ch_2_Comp;
        } var_3;
    } variant;
} Rec_Type, * Rec_Pointer;

typedef struct dhrystoneContext {
    Rec_Pointer     Ptr_Glob,
        Next_Ptr_Glob;
    int             Int_Glob;
    Boolean         Bool_Glob;
    char            Ch_1_Glob,
        Ch_2_Glob;
    int             Arr_1_Glob[50];
    int             Arr_2_Glob[50][50];
} dhrystoneContext;



//function prototypes
{% for i in range(n) %}
void mhultistone_instance_CTX{{ i }}(int64_t n, int* keepRunning, int64_t *count);
void Proc_1_CTX{{ i }}(REG Rec_Pointer Ptr_Val_Par);
void Proc_2_CTX{{ i }}(One_Fifty* Int_Par_Ref);
void Proc_3_CTX{{ i }}(Rec_Pointer* Ptr_Ref_Par);
void Proc_4_CTX{{ i }}();
void Proc_5_CTX{{ i }}();
void Proc_6_CTX{{ i }}(Enumeration  Enum_Val_Par, Enumeration* Enum_Ref_Par);
void Proc_7_CTX{{ i }}(One_Fifty Int_1_Par_Val, One_Fifty Int_2_Par_Val, One_Fifty* Int_Par_Ref);
void Proc_8_CTX{{ i }}(Arr_1_Dim Arr_1_Par_Ref, Arr_2_Dim Arr_2_Par_Ref, int Int_1_Par_Val, int Int_2_Par_Val);
Enumeration Func_1_CTX{{ i }}(Capital_Letter Ch_1_Par_Val, Capital_Letter Ch_2_Par_Val);
Boolean Func_2_CTX{{ i }}(Str_30 Str_1_Par_Ref, Str_30 Str_2_Par_Ref);
Boolean Func_3_CTX{{ i }}(Enumeration Enum_Par_Val);
{% endfor %}

#endif // MHULTISTONE_H
